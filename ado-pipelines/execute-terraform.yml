trigger: none

pool:
  name: AFMC-JOMSMVP

parameters:
- name: TF_Module
  displayName: The Terraform Module to Execute
  type: string
  default: global
  values:
  - global
  - planner
- name: TF_Action
  displayName: The Terraform Action to Execute
  type: string
  default: plan
  values:
  - plan
  - apply
  - show
  - destroy
- name: TF_Workspace
  displayName: The Terraform Workspace
  type: string
  default: MVP
- name: TF_Vars
  displayName: (Optional) Additional Terraform Variables
  type: string
  default: ' '

variables:
- group: AFMC-JOMSMVP-KVT # Variable group name from Azure DevOps Library
- name: ARM_CLIENT_ID
  value: $(spAppId)
- name: ARM_CLIENT_SECRET
  value: $(spAppKey)
- name: ARM_ACCESS_KEY
  value: $(container-access-key-1)
- name: ARM_TENANT_ID
  value: $(tenant-id)
- name: ARM_ENVIRONMENT
  value: 'usgovernment'
- name: TFSTATE_CONTAINER
  value: $(tfstate-container)
- name: TFSTATE_STORAGE_ACCOUNT
  value: $(tfstate-storage-account)
- name: TFSTATE_RESOURCE_GROUP
  value: $(tfstate-resource-group)
- name: FUNC_AREA
  value: 'AFMC'
- name: PROJECT
  value: 'JOMS'
- name: C1_PROJECT
  value: '$(PROJECT)MVP'

stages:
  # Stage 0: Gather Dynamic Variables
  - stage: variables
    displayName: 'Gather Dynamic Variables'
    jobs:
      - job: get
        displayName: 'Resolve Dynamic Variables'
        steps:
          # Step 0: Get Stage from URI
          - powershell: >
              echo "##vso[task.setvariable variable=stage;isOutput=true]
              $((echo $env:BUILD_REPOSITORY_URI).Split('.')[1])"
            name: c1
            displayName: 'Get Stage from URI'
          
          # Step 1: Azure CLI Login
          - powershell: |
              echo "Logging into Azure using service principal..."
              az cloud set --name AzureUSGovernment
              az login --service-principal `
                --username $(ARM_CLIENT_ID) `
                --password $(ARM_CLIENT_SECRET) `
                --tenant $(ARM_TENANT_ID)
              echo "Listing available subscriptions..."
              az account list
              echo "Listing available subscriptions..."
              $Subscription="$(az account list --query '[0].id' --output tsv)"
              echo "Subscription: $Subscription"
              az account set --subscription $Subscription
              echo "Current account context:"
              az account show
            displayName: 'Azure CLI Login and Set Subscription'
            
          # Step 3: Get Subscription ID from the Azure CLI
          - powershell: >
              echo "##vso[task.setvariable variable=subscription_id;isOutput=true]
              $(az account list --query '[0].id' --output tsv)"
            name: az
            displayName: 'Get Subscription from Azure CLI'

  # Stage 1: Execute Terraform
  - stage: Execute_Terraform
    displayName: 'Execute Terraform'
    dependsOn:
     - variables
    variables:
      stage: $[ stageDependencies.variables.get.outputs['c1.stage'] ]
      subscription_id: $[ stageDependencies.variables.get.outputs['az.subscription_id'] ]
    jobs:  
      - job: Install_Terraform_Job
        displayName: 'Install Terraform'
        steps:

        # Step 1: Download Terraform from Artifactory
          - powershell: |
              echo "Downloading Terraform binary from Artifactory..."
              $stage = "$(stage)".Trim()
              $url = "https://artifact.$stage.azure.cce.af.mil:443/" + `
                "artifactory/$(FUNC_AREA)-$(C1_PROJECT)-$($stage.ToUpper())" + `
                "/IaC/software/terraform-bundle.zip"
              $output = "$(Pipeline.Workspace)\terraform-bundle.zip"
              $username = '$(artifactoryUser)'
              $password = '$(artifactorySecret)'
              $bytes = [System.Text.Encoding]::ASCII.GetBytes("${username}:${password}")
              $base64AuthInfo = [Convert]::ToBase64String($bytes)
              $headers = @{Authorization = "Basic $base64AuthInfo"}
              try {
                  Invoke-WebRequest -Uri $url -OutFile $output -Headers $headers
                  echo "Terraform binary downloaded successfully."
              } catch {
                  Write-Error "Failed to download Terraform binary: $_"; exit 1
              }
            displayName: 'Download Terraform binary from Artifactory'

        # Step 2: Extract Terraform Bundle
          - powershell: |
              try {
                  echo "Extracting Terraform binary..."
                  Expand-Archive -Path "$(Pipeline.Workspace)\terraform-bundle.zip" `
                    -DestinationPath "$(Pipeline.Workspace)" -Force
                  echo "Terraform binary extracted successfully."
              } catch {
                  Write-Error "Failed to extract Terraform binary: $_"; exit 1
              }
              $extractionDir = "$(Pipeline.Workspace)"
              $binDir = "$(Pipeline.Workspace)\bin"
              if(-Not (Test-Path $binDir)) {
                New-Item -Path $binDir -ItemType Directory -Force
              }
              $terraformPath = "$binDir\terraform.exe"
              Move-Item -Path "$extractionDir\terraform.exe" `
                        -Destination $terraformPath `
                        -Force
              if (Test-Path $terraformPath) {
                  echo "Terraform executable found at: $terraformPath"
              } else {
                  Write-Error "Terraform executable not found!"; exit 1
              }
            displayName: 'Extract and Verify Terraform binary'

        # Step 3: Verify Terraform Installation
          - powershell: |
              echo "Verifying Terraform installation..."
              $terraformPath = "$(Pipeline.Workspace)\bin\terraform.exe"
              if (Test-Path $terraformPath) {
                  echo "Terraform executable found, checking version..."
                  & $terraformPath --version
              } else {
                  Write-Error "Terraform executable not found!"; exit 1
              }
            displayName: 'Verify Terraform version'

        # Step 4: Verify the provider directory exists
          - powershell: |
              echo "Verifying the provider directory..."
              Get-ChildItem -Recurse -Directory "$(Pipeline.Workspace)"
              $providerPath = "$(Pipeline.Workspace)\plugins\registry.terraform.io\hashicorp\"
              if (Test-Path $providerPath) {
                  echo "Provider directory exists: $providerPath"
                  
                  # List files inside the provider directory to ensure files exist
                  $providerFiles = Get-ChildItem -Path $providerPath
                  if ($providerFiles.Count -eq 0) {
                      Write-Error "No files found in the provider directory."
                      exit 1
                  } else {
                      echo "Files in provider directory:"
                      $providerFiles | ForEach-Object { echo $_.FullName }
                  }
              } else {
                  Write-Error "Provider directory not found: $providerPath"
                  exit 1
              }
            displayName: 'Verify provider directory'

      - job: Terraform_Execute_Job
        displayName: 'Run Terraform'
        timeoutInMinutes: 120
        dependsOn:
        - Install_Terraform_Job
        steps:

        # Step 1: Initialize Terraform
          - powershell: |
              echo "Initializing Terraform..."
              $terraformPath = "$(Pipeline.Workspace)\bin\terraform.exe"
              $providerPath = "$(Pipeline.Workspace)\plugins\"

              if (Test-Path $terraformPath) {
                  Set-Location terraform/${{ parameters.TF_Module }}
                  
                  # Add the ARM_ACCESS_KEY to main.tf file
                  (Get-Content .\main.tf).Replace('{{ ARM_ACCESS_KEY }}', '$(ARM_ACCESS_KEY)') `
                    | Set-Content .\main.tf

                  & "$terraformPath" init -plugin-dir="$providerPath" -input=false `
                    -backend-config="resource_group_name=$(TFSTATE_RESOURCE_GROUP)" `
                    -backend-config="storage_account_name=$(TFSTATE_STORAGE_ACCOUNT)" `
                    -backend-config="container_name=$(TFSTATE_CONTAINER)" `
                    -backend-config="key=${{ parameters.TF_Module }}/${{ parameters.TF_Workspace }}.tfstate"
                  
                  echo "Terraform initialized successfully."
              } else {
                  Write-Error "Terraform executable not found at: $terraformPath"; exit 1
              }
            displayName: 'Initialize Terraform'

        # Step 2:  Execute terraform
          - powershell: |
              echo "Running Terraform..."
              $terraformPath = "$(Pipeline.Workspace)\bin\terraform.exe"
              $workingDirectory = "$(Build.SourcesDirectory)"

              echo "Download Terraform Variables File, if one exists"
              
              $DefaultTfVarsFile = ".\terraform\.default.tfvars"
              az storage blob download `
                --file $DefaultTfVarsFile `
                --account-name "$(TFSTATE_STORAGE_ACCOUNT)" `
                --container-name "$(TFSTATE_CONTAINER)" `
                --name "${{ parameters.TF_Workspace }}.tfvars" `
                --account-key '$(ARM_ACCESS_KEY)' `
                --auth-mode 'key' `
                --overwrite 'true' `
                --no-progress `
                1> $null
              
              echo "Default TF Vars File:"
              Get-Content $DefaultTfVarsFile

              echo "Export Terraform Variables"

              $TF_Vars = "${{ parameters.TF_Vars }}".Trim()
              if($TF_Vars) {
                $TF_Vars -Split ' ' |
                  ForEach-Object {
                    $KeyValue = $_ -Split '='
                    $Key = $KeyValue[0]
                    $Value = $KeyValue[1]
                    Invoke-Expression "`$env:$Key='$Value'"
                  }
              }

              $env:TF_VAR_environment_name="${{ parameters.TF_Workspace }}"
              $env:TF_VAR_parent_module="${{ parameters.TF_Module }}"
              $env:TF_VAR_stage="$(stage)".Trim()
              $env:TF_VAR_subscription_id="$(subscription_id)".Trim()
              $env:TF_VAR_functional_area="$(FUNC_AREA)"
              $env:TF_VAR_project="$(PROJECT)"
              $env:TF_VAR_c1_project="$(C1_PROJECT)"
              $env:TF_VAR_gcds_ips="$(gcds-ips)"
              $env:TF_VAR_tfstate_resource_group="$(TFSTATE_RESOURCE_GROUP)"
              $env:TF_VAR_tfstate_storage_account="$(TFSTATE_STORAGE_ACCOUNT)"
              $env:TF_VAR_tfstate_container="$(TFSTATE_CONTAINER)"
              $env:TF_VAR_tfstate_key="${{ parameters.TF_Module }}/${{ parameters.TF_Workspace }}.tfstate"

              # Print TF Vars
              gci env:TF_VAR*

              # Set additional TF Flags based on Action
              $TF_Flags = @()
              if (@("plan","apply","destroy") -Contains "${{ parameters.TF_Action }}") {
                $TF_Flags += '-var-file'
                $TF_Flags += "..\.default.tfvars"
              }
              if (@("apply","destroy") -Contains "${{ parameters.TF_Action }}") {
                $TF_Flags += '-auto-approve'
              }
              echo "Terraform Flags:"
              echo $TF_Flags

              if (Test-Path $terraformPath) {
                  echo "Found Terraform executable at: $terraformPath"
                  
                  # Check if the working directory exists
                  if (Test-Path $workingDirectory) {
                      Set-Location $workingDirectory/terraform/${{ parameters.TF_Module }}
                      & "$terraformPath" ${{ parameters.TF_Action }} @TF_Flags
                      echo "Terraform executed successfully."
                  } else {
                      Write-Error "Working directory not found: $workingDirectory"
                      exit 1
                  }
              } else {
                  Write-Error "Terraform executable not found at: $terraformPath"
                  exit 1
              }
            displayName: 'Run Terraform'

      # Clean Up run
      - job: Clean_Up_Job
        displayName: 'Run Clean Up'
        dependsOn:
        - Terraform_Execute_Job
        condition: always()
        steps:
        - task: DeleteFiles@1
          condition: always()
          inputs:
            SourceFolder: "$(Agent.BuildDirectory)"
            RemoveDotFiles: true
            RemoveSourceFolder: false
            Contents: |
              a
              b
              bin
              local*
              plugins
              s/**/*
              terraform*
              TestResults
              *.exe
